{"version":3,"sources":["kensho.js"],"names":["Kensho","formElement","option","isInitialize","init","document","querySelector","rule","hook","Hook","_","Map","set","Object","create","defineProperty","enumerable","get","inputs","classList","add","inputElement","errorElement","event","param","querySelectorAll","Array","isArray","name","getAttribute","tagName","toLowerCase","type","unit","inputTagName","error","forEach","i","input","validate","addEventListener","value","callback","console","log","innerHTML","_c","lang","errorMessageWrapper","config","key","val","_k","map","_get","self","kensho","actions","filters","setAction","setFilter","plugin","ruleBook","dependency","remove","initialized","trim"],"mappings":"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","file":"kensho.js","sourcesContent":["class Kensho{\n\n/**\n *\n * @param  {string|HTMLElement} formElement             - \n * @param  {object}             [option={}]             - \n * @param  {string}             [option.errorWrap=span] - \n * @return {Kensho}\n */\nconstructor(formElement, option = {}){\n  if(Kensho.isInitialize) Kensho.init();\n  formElement = typeof formElement === 'string' ? document.querySelector(formElement) : formElement;\n\n  this.formElement = formElement;\n  this.rule        = Kensho.rule;\n  this.hook        = new Kensho.Hook(this);\n  \n  // soft private\n  this._ = new Map();\n  this._.set(this, Object.create(null));\n  Object.defineProperty(this, '_', { enumerable : false });\n  let _ = this._.get(this);\n  _.inputs = {};\n  \n\n  // console.log(form instanceof HTMLElement);\n  formElement.classList.add('kensho-form');\n\n  // this.hook.addAction('init');\n}\n\n\n\n\n// Kensho.addRule\n\n/**\n * \n * Add validation field.\n *\n * About of [event=['']] param.\n * it fundamentally set event.type name.\n * but, it has especial names, as follows.\n *   init - when in add() method\n * \n * @param {string|HTMLElement|array<HTMLElement>} inputElement - Form input HTML element or its CSS selector string.\n * @param {string|HTMLElement}                    errorElement - Wrapper element of output error message or its CSS selector string.\n * @param {object}                                rule         - The key is rule name. The value is error message.\n * @param {string|<string>}                       [event=['']] - trigger event.\n * @return {Kensho} this\n */\nadd(inputElement, errorElement, rule, event = [''], param = {}){\n\n  // for example, name attribute of radio buttons are seted same value.\n  // querySelector return matched first HTML element and 2nd and subsequent matched element is ignored.\n  // so, InputElement not use querySelector but use querySelectorAll.\n  // as a result of it, inputElement type is a array.\n  inputElement = typeof inputElement === 'string' ? document.querySelectorAll(inputElement) : Array.isArray(inputElement) ? inputElement : [inputElement];\n  errorElement = typeof errorElement === 'string' ? document.querySelector(errorElement) : errorElement;\n  event        = typeof event        === 'string' ? [event] : event;\n\n  let _       = this._.get(this);\n  let name    = inputElement[0].getAttribute('name');\n  let tagName = inputElement[0].tagName.toLowerCase();\n  let type    = null;\n  if(tagName === 'input') type = inputElement[0].getAttribute('type');\n  else type = tagName;\n  if(type !== 'radio') inputElement = inputElement[0];\n\n  let unit = _.inputs[name] = {\n    name         : name,\n    inputElement : inputElement,\n    errorElement : errorElement,\n    inputTagName : tagName,\n    type         : type,\n    rule         : rule,\n    error        : []\n    // name         : name,\n    // $input       : $input,\n    // inputTagName : tagName,\n    // type         : type,\n    // $err         : $err,\n    // validate     : validate,\n    // errMsg       : errMsg,\n    // event        : event,\n    // errors       : [],\n    // zeroThrough  : true\n  }\n  \n  // Add event handler\n  event.forEach((name, i)=>{\n    if(name === 'init'){\n      if(unit.type === 'radio'){\n        unit.inputElement.forEach((input, i)=>{\n          this.validate(unit.name);\n        });\n      }else{\n        this.validate(unit.name);\n      }\n    }else{\n      if(unit.type === 'radio'){\n        unit.inputElement.forEach((input, i)=>{\n          input.addEventListener(name, ()=>{\n            this.validate(unit.name);\n          });\n        });\n      }else{\n        unit.inputElement.addEventListener(name, ()=>{\n          this.validate(unit.name);\n        });\n      }\n    }\n  });\n\n  return this;\n  // this.addAction('add');\n  \n}\n\n/**\n * validate value\n * @param  {string}     name  - validation rule name.\n * @param  {string|int} value - \n * @param  {object}     param - key/value variables for callback\n * @return {boolean}\n */\nstatic validate(name, value, param = {}){\n  let rule = this.rule.get(name);\n\n\n  return rule.callback(value, param);\n}\n\n/**\n *\n *\n * @name   {string}\n * @name   {param}\n * @return {kensho} this\n */\nvalidate(name, param = {}){\n  console.log(\"member\");\n  let _    = this._.get(this);\n  let unit = _.inputs[name];\n\n  if(unit.type === 'text'){\n    value = unit.inputElement.value;\n  }else{\n    value = this.formElement[unit.name] ? this.formElement[unit.name] : value;\n  }\n  if(unit.type === 'textarea'){\n    // console.log();\n  }\n  \n  unit.errorElement.innerHTML = '';\n  unit.error                  = [];\n  return this;\n}\n\n}\n\n(()=>{\n  let _c = {};\n  // ===========================================================================\n  // \n  // DEFAULT CONFIGURATIONS.\n  // \n  // ===========================================================================\n  _c.lang                = 'en'; // language\n  _c.errorMessageWrapper = 'li';\n\n  Kensho.config = {\n    /**\n     * get configuration value\n     * \n     * @param  {string} key - Configuration key name\n     * @return {*}\n     */\n    get(key){\n      return _c[key];\n    },\n    /**\n     * Set configuration value\n     * \n     * @param {string|obj} key - Configuration key name or Object.\n     * @param void\n     */\n    set(key, val){\n      if(typeof key === 'object') for(let _k in key) this.set(_k, key[_k]);\n      _c[key] = val;\n    }\n  }\n  \n})();\n\n(()=>{\n  let map  = new Map();\n  let _get = self => map.get(self);\n  \n  class Hook{\n    /**\n     * [constructor description]\n     * @param  {Kensho} kensho - instance of Kensho\n     * @return {[type]} [description]\n     */\n    constructor(kensho){\n      this.kensho  = kensho;\n      this.actions = [];\n      this.filters = [];\n      \n      map.set(this, Object.create(null));\n      \n      \n      let _ = _get(this);\n      // console.log(_);\n    }\n    /**\n     * Do hook action\n     * @param  {string} name - to do hook name\n     * @return {void}\n     */\n    setAction(name){\n      \n    }\n    /**\n     * Do hook filter\n     * @param  {string} name - to do hook name\n     * @return {*}\n     */\n    setFilter(name){\n      \n    }\n  }\n  Kensho.Hook = Hook;\n})();\n\n(()=>{\n  let plugin = Object.create(null);\n  Kensho.plugin = plugin;\n})();\n\n(()=>{\n  let ruleBook = {};\n  let rule = Object.create(null);\n\n  /**\n   *\n   * add validataion rule.\n   *\n   * the callback variable must return type of boolean.\n   * \n   * @param  {string}          name       - Validation rule name.\n   * @param  {function}        callback   - Rule method\n   * @param  {string|<string>} dependency - Other rule that the rule depend on.\n   * @return {object} this\n   */\n  rule.add = function(name, callback, dependency = []){\n    dependency = typeof dependency === 'string' ? [dependency] : dependency;\n    ruleBook[name] = {\n      callback   : callback,\n      dependency : dependency\n    };\n  };\n\n  /**\n   * \n   * remove validation rule.\n   *\n   * @parm   {string} name - \n   * @return {object} this\n   */\n  rule.remove = function(name){\n    delete ruleBook[name];\n    return this;\n  };\n  Kensho.rule = rule;\n\n  /**\n   * \n   * return validation rule.\n   * \n   * @return {object} this\n   */\n  rule.get = (name)=> ruleBook[name];\n\n\n  Kensho.rule = rule;\n})();\n\n(()=>{\n  let initialized = false;\n  /**\n   * \n   */\n  Kensho.init = ()=>{\n    initialized = true;\n  };\n  /**\n   * \n   * @return {Boolean}\n   */\n  Kensho.isInitialize = ()=> initialized;\n})();\n\n(()=>{\n  let rule  = Kensho.rule;\n\n  /**\n   * required\n   */\n  rule.add('required', function(val, param){\n    return !val.trim() ? false : true;\n  });\n\n})();\n"]}