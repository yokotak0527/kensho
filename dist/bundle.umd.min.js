!function(e,r){"object"==typeof exports&&"undefined"!=typeof module?module.exports=r():"function"==typeof define&&define.amd?define(r):(e="undefined"!=typeof globalThis?globalThis:e||self).Kensho=r()}(this,(function(){"use strict";const e=new Map,r={add(r,t){if("string"!=typeof r)throw new Error('The argument "name" must be a string.');if(""===r)throw new Error("Empty string are not accepted.");if("function"!=typeof t)throw new Error('The argument "rule" must be a function.');if(e.get(r))throw new Error(`The "${r}" rule already exist.`);e.set(r,t)},remove(r){if("string"!=typeof r)throw new Error('The argument "name" must be a string.');if(""===r)throw new Error("Empty string are not accepted.");if(!e.get(r))throw new Error(`The "${r}" rule isn't existed.`);e.delete(r)},get(r){if("string"!=typeof r)throw new Error('The argument "name" must be a string.');if(""===r)throw new Error("Empty string are not accepted.");const t=e.get(r);if(void 0===t)throw new Error(`The "${r}" rule isn't found.`);return t}},t=new Map,n={add(e,r){if("string"!=typeof e)throw new Error('The argument "name" must be a string.');if(""===e)throw new Error("Empty string are not accepted.");if("function"!=typeof r)throw new Error('The argument "plugin" must be a function.');if(t.get(e))throw new Error(`The "${e}" plugin already exist.`);t.set(e,r)},remove(e){if("string"!=typeof e)throw new Error('The argument "name" must be a string.');if(""===e)throw new Error("Empty string are not accepted.");if(!t.get(e))throw new Error(`The "${e}" plugin isn't existed.`);t.delete(e)},get(e){if("string"!=typeof e)throw new Error('The argument "name" must be a string.');if(""===e)throw new Error("Empty string are not accepted.");const r=t.get(e);if(void 0===r)throw new Error(`The "${e}" plugin isn't found.`);return r},use(e){}};return class{static rule=r;static plugin=n;constructor(){}}}));
<<<<<<< HEAD
=======
<<<<<<< HEAD
//# sourceMappingURL=bundle.umd.min.js.map
=======
>>>>>>> e6df963 (add rule arc.)
>>>>>>> 3a2a0e0 (add rule arc.)
