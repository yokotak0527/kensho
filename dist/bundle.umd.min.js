!function(e,r){"object"==typeof exports&&"undefined"!=typeof module?module.exports=r():"function"==typeof define&&define.amd?define(r):(e="undefined"!=typeof globalThis?globalThis:e||self).Kensho=r()}(this,(function(){"use strict";const e=new Map,r={add(r,t){if("string"!=typeof r)throw new Error('The argument "name" must be a string.');if(""===r)throw new Error("Empty string are not accepted.");if("function"!=typeof t)throw new Error('The argument "rule" must be a function.');if(e.get(r))throw new Error(`The "${r}" rule already exist.`);e.set(r,t)},remove(r){if("string"!=typeof r)throw new Error('The argument "name" must be a string.');if(""===r)throw new Error("Empty string are not accepted.");if(!e.get(r))throw new Error(`The "${r}" rule isn't existed.`);e.delete(r)},get(r){if("string"!=typeof r)throw new Error('The argument "name" must be a string.');if(""===r)throw new Error("Empty string are not accepted.");const t=e.get(r);if(void 0===t)throw new Error(`The "${r}" rule isn't found.`);return t},import(e){Object.entries(e).forEach((([e,r])=>this.add(e,r)))}},t=new Map,n={config:{validate:{throughEmptyString:!1,throughNull:!1,throughUndefined:!1,throughNaN:!1}},rule:r,converter:{add(e,r){if("string"!=typeof e)throw new Error('The argument "name" must be a string.');if(""===e)throw new Error("Empty string are not accepted.");if("function"!=typeof r)throw new Error('The argument "converter" must be a function.');if(t.get(e))throw new Error(`The "${e}" converter already exist.`);t.set(e,r)},remove(e){if("string"!=typeof e)throw new Error('The argument "name" must be a string.');if(""===e)throw new Error("Empty string are not accepted.");if(!t.get(e))throw new Error(`The "${e}" converter isn't existed.`);t.delete(e)},get(e){if("string"!=typeof e)throw new Error('The argument "name" must be a string.');if(""===e)throw new Error("Empty string are not accepted.");const r=t.get(e);if(void 0===r)throw new Error(`The "${e}" converter isn't found.`);return r},import(e){Object.entries(e).forEach((([e,r])=>this.add(e,r)))}},convert:(e,r)=>"string"==typeof e?n.converter.get(e)(r):(e.forEach((e=>{r=n.converter.get(e)(r)})),r),validate(e,r,t,o={}){const i=n.rule.get(e),a=Object.assign({},n.config.validate,o);return!("string"!=typeof r||!a.throughEmptyString)||(!(null!==r||!a.throughNull)||(!(void 0!==r||!a.throughUndefined)||(!(!Number.isNaN(r)||!a.throughNaN)||i(r,t))))}};return n}));
//# sourceMappingURL=bundle.umd.min.js.map
