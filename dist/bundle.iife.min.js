var Kensho=function(){"use strict";const r=new Map,e={add(e,t){if("string"!=typeof e)throw new Error('The argument "name" must be a string.');if(""===e)throw new Error("Empty string are not accepted.");if("function"!=typeof t)throw new Error('The argument "rule" must be a function.');if(r.get(e))throw new Error(`The "${e}" rule already exist.`);r.set(e,t)},remove(e){if("string"!=typeof e)throw new Error('The argument "name" must be a string.');if(""===e)throw new Error("Empty string are not accepted.");if(!r.get(e))throw new Error(`The "${e}" rule isn't existed.`);r.delete(e)},get(e){if("string"!=typeof e)throw new Error('The argument "name" must be a string.');if(""===e)throw new Error("Empty string are not accepted.");const t=r.get(e);if(void 0===t)throw new Error(`The "${e}" rule isn't found.`);return t},book(r){Object.entries(r).forEach((([r,e])=>this.add(r,e)))}},t=new Map,n={add(r,e){if("string"!=typeof r)throw new Error('The argument "name" must be a string.');if(""===r)throw new Error("Empty string are not accepted.");if("function"!=typeof e)throw new Error('The argument "plugin" must be a function.');if(t.get(r))throw new Error(`The "${r}" plugin already exist.`);t.set(r,e)},remove(r){if("string"!=typeof r)throw new Error('The argument "name" must be a string.');if(""===r)throw new Error("Empty string are not accepted.");if(!t.get(r))throw new Error(`The "${r}" plugin isn't existed.`);t.delete(r)},get(r){if("string"!=typeof r)throw new Error('The argument "name" must be a string.');if(""===r)throw new Error("Empty string are not accepted.");const e=t.get(r);if(void 0===e)throw new Error(`The "${r}" plugin isn't found.`);return e},use(r){}},o=new Map,i={add(r,e){if("string"!=typeof r)throw new Error('The argument "name" must be a string.');if(""===r)throw new Error("Empty string are not accepted.");if("function"!=typeof e)throw new Error('The argument "converter" must be a function.');if(o.get(r))throw new Error(`The "${r}" converter already exist.`);o.set(r,e)},remove(r){if("string"!=typeof r)throw new Error('The argument "name" must be a string.');if(""===r)throw new Error("Empty string are not accepted.");if(!o.get(r))throw new Error(`The "${r}" converter isn't existed.`);o.delete(r)},get(r){if("string"!=typeof r)throw new Error('The argument "name" must be a string.');if(""===r)throw new Error("Empty string are not accepted.");const e=o.get(r);if(void 0===e)throw new Error(`The "${r}" converter isn't found.`);return e}};class s{constructor(){}static validate(r,e,t){return this.rule.get(r)(e,t)}static convert(r,e){"string"==typeof e&&(e=[e]),e.forEach((e=>{r=this.converter.get(e)(r)}));const t=this.validate;return Object.assign(Object.assign({},this),{validate:(e,n)=>t(e,r,n)})}}return s.rule=e,s.plugin=n,s.converter=i,s}();
//# sourceMappingURL=bundle.iife.min.js.map
