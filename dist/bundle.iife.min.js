var Kensho=function(){"use strict";const r=new Map,e={add(e,t){if("string"!=typeof e)throw new Error('The argument "name" must be a string.');if(""===e)throw new Error("Empty string are not accepted.");if("function"!=typeof t)throw new Error('The argument "rule" must be a function.');if(r.get(e))throw new Error(`The "${e}" rule already exist.`);r.set(e,t)},remove(e){if("string"!=typeof e)throw new Error('The argument "name" must be a string.');if(""===e)throw new Error("Empty string are not accepted.");if(!r.get(e))throw new Error(`The "${e}" rule isn't existed.`);r.delete(e)},get(e){if("string"!=typeof e)throw new Error('The argument "name" must be a string.');if(""===e)throw new Error("Empty string are not accepted.");const t=r.get(e);if(void 0===t)throw new Error(`The "${e}" rule isn't found.`);return t},import(r){Object.entries(r).forEach((([r,e])=>this.add(r,e)))}},t=new Map,n={config:{validate:{throughEmptyString:!1,throughNull:!1,throughUndefined:!1,throughNaN:!1}},rule:e,converter:{add(r,e){if("string"!=typeof r)throw new Error('The argument "name" must be a string.');if(""===r)throw new Error("Empty string are not accepted.");if("function"!=typeof e)throw new Error('The argument "converter" must be a function.');if(t.get(r))throw new Error(`The "${r}" converter already exist.`);t.set(r,e)},remove(r){if("string"!=typeof r)throw new Error('The argument "name" must be a string.');if(""===r)throw new Error("Empty string are not accepted.");if(!t.get(r))throw new Error(`The "${r}" converter isn't existed.`);t.delete(r)},get(r){if("string"!=typeof r)throw new Error('The argument "name" must be a string.');if(""===r)throw new Error("Empty string are not accepted.");const e=t.get(r);if(void 0===e)throw new Error(`The "${r}" converter isn't found.`);return e},import(r){Object.entries(r).forEach((([r,e])=>this.add(r,e)))}},convert:(r,e)=>"string"==typeof r?n.converter.get(r)(e):(r.forEach((r=>{e=n.converter.get(r)(e)})),e),validate(r,e,t,o={}){const i=n.rule.get(r),a=Object.assign({},n.config.validate,o);return!("string"!=typeof e||!a.throughEmptyString)||(!(null!==e||!a.throughNull)||(!(void 0!==e||!a.throughUndefined)||(!(!Number.isNaN(e)||!a.throughNaN)||i(e,t))))}};return n}();
//# sourceMappingURL=bundle.iife.min.js.map
